// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/calc.proto

package calc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CalcRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// CalcRequestMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *CalcRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetNum1(); val < 0 || val >= 100 {
		err := CalcRequestValidationError{
			field:  "Num1",
			reason: "value must be inside range [0, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetNum2(); val < 0 || val >= 100 {
		err := CalcRequestValidationError{
			field:  "Num2",
			reason: "value must be inside range [0, 100)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CalcRequestMultiError(errors)
	}
	return nil
}

// CalcRequestMultiError is an error wrapping multiple validation errors
// returned by CalcRequest.Validate(true) if the designated constraints aren't met.
type CalcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalcRequestMultiError) AllErrors() []error { return m }

// CalcRequestValidationError is the validation error returned by
// CalcRequest.Validate if the designated constraints aren't met.
type CalcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalcRequestValidationError) ErrorName() string { return "CalcRequestValidationError" }

// Error satisfies the builtin error interface
func (e CalcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalcRequestValidationError{}

// Validate checks the field values on CalcResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// CalcResponseMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *CalcResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CalcResponseMultiError(errors)
	}
	return nil
}

// CalcResponseMultiError is an error wrapping multiple validation errors
// returned by CalcResponse.Validate(true) if the designated constraints
// aren't met.
type CalcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalcResponseMultiError) AllErrors() []error { return m }

// CalcResponseValidationError is the validation error returned by
// CalcResponse.Validate if the designated constraints aren't met.
type CalcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalcResponseValidationError) ErrorName() string { return "CalcResponseValidationError" }

// Error satisfies the builtin error interface
func (e CalcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalcResponseValidationError{}
